{"nbformat":4,"nbformat_minor":0,"metadata":{"colab":{"provenance":[{"file_id":"19-5VVsGjYuWlUYTvrLHxqKDD2eOqtzTH","timestamp":1732247390137},{"file_id":"1M-O_KUCtKLJnPKgWsQQu9bkGfa2vOHnO","timestamp":1731995359302}]},"kernelspec":{"name":"python3","display_name":"Python 3"},"language_info":{"name":"python"}},"cells":[{"cell_type":"markdown","source":["ФИО:"],"metadata":{"id":"fLDS5f_mCnPa"}},{"cell_type":"markdown","source":["Лозицкая Елизавета Никитична\n"],"metadata":{"id":"2nyI9vuYHYd2"}},{"cell_type":"markdown","source":["# Задание 1"],"metadata":{"id":"8XGka5GtEBK1"}},{"cell_type":"markdown","source":["Задание:\n","\n","Создайте класс с именем Rectangle который имеет:\n","- Атрибуты ширины и высоты.\n","- Метод расчета площади.\n","- Метод расчета периметра.\n","- Метод отображения размеров прямоугольника.\n","\n","Создайте экземпляр класса Rectangleи продемонстрируйте его функциональность."],"metadata":{"id":"jQ4qqd8nEZBY"}},{"cell_type":"code","source":["print('введите ширину и высоту')\n","weight_in = int(input())\n","height_in = int(input())\n","class Rectangle:\n","  def __init__(self, width, height):\n","    self.width = width\n","    self.height = height\n","\n","\n","  def area(self):\n","    s = self.height * self.width\n","    return s\n","\n","\n","  def perimetr(self):\n","    p = 2*(self.width + self.height)\n","    return p\n","\n","\n","  def parameters(self):\n","    print(f\"длина: {self.width}\")\n","    print(f\"ширина: {self.height}\")\n","    print(f\"площадь: {self.area()}\")\n","    print(f\"периметр: {self.perimetr()}\")\n","\n","\n","figure = Rectangle(weight_in, height_in)\n","figure.parameters()"],"metadata":{"id":"dG6uNPqTEAvt","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1732250867975,"user_tz":-300,"elapsed":10691,"user":{"displayName":"Елизавета Лозицкая","userId":"14110672105221511480"}},"outputId":"5e98c543-64dd-4f90-ccf0-095e6d3d0cc9"},"execution_count":19,"outputs":[{"output_type":"stream","name":"stdout","text":["введите ширину и высоту\n","1\n","3\n","длина: 1\n","ширина: 3\n","площадь: 3\n","периметр: 8\n"]}]},{"cell_type":"markdown","source":["# Задание 2"],"metadata":{"id":"0ct1u6lqE73j"}},{"cell_type":"markdown","source":["Задание: Создайте мини версию банковской системы:\n","\n","\n","Инструкции:\n","\n","1. Создайте класс BankAccountсо следующими атрибутами:\n","    - account_holder -  владелец счета\n","    - balance - баланс счета\n","\n","2. Реализуйте следующие методы:\n","    - Метод для инициализации владельца счета: имя владельца счета и установите начальный баланс на 0.\n","    - deposit(amount): Добавьте указанную сумму к балансу.\n","    - withdraw(amount): Вычесть указанную сумму из баланса, если средств достаточно; в противном случае вывести предупреждение.\n","    - get_balance(): Возврат текущего баланса.\n","\n","\n","Создайте объект класса и продемонстрируйте его возможности"],"metadata":{"id":"FOpIpcLxE-WK"}},{"cell_type":"code","source":["class BankAccoutco:\n","  def __init__(self, account_holder):\n","    self.account_holder = account_holder\n","    self.balance = 0\n","\n","\n","  def deposit(self):\n","    print('введите сумму, которую хотите положить на счёт: ')\n","    amount = int(input())\n","    self.balance = self.balance + amount\n","\n","\n","  def withdraw(self):\n","    print('введит сумму, которую хотите снять со счёта: ')\n","    amount = int(input())\n","    if self.balance > amount:\n","      self.balance = self.balance - amount\n","    else:\n","      print('недостаточно средств для списания')\n","\n","\n","  def get_balance(self):\n","    print(self.balance)\n","\n","\n","name = input()\n","user = BankAccoutco(name)\n","\n","user.deposit()\n","user.withdraw()\n","user.get_balance()"],"metadata":{"id":"WWXNIUrCE99W","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1732253196122,"user_tz":-300,"elapsed":18967,"user":{"displayName":"Елизавета Лозицкая","userId":"14110672105221511480"}},"outputId":"54ba96cc-de94-42df-cae5-77f153e49181"},"execution_count":23,"outputs":[{"output_type":"stream","name":"stdout","text":["cat\n","введите сумму, которую хотите положить на счёт: \n","111\n","введит сумму, которую хотите снять со счёта: \n","2000\n","недостаточно средств для списания\n","111\n"]}]},{"cell_type":"markdown","source":["# Задание 3"],"metadata":{"id":"C5DX5Uf2FfP6"}},{"cell_type":"markdown","source":["Возьмите код и задание (Рыцарь и дракон) из предыдущей практики и реализуйте его с применением классов"],"metadata":{"id":"0cR-MYepFgz6"}},{"cell_type":"code","source":["class Knight:\n","  def __init__(self, name, armor, weapon, damage, health):\n","    self.name = name\n","    self.armor = armor\n","    self.weapon = weapon\n","    self.damage = damage\n","    self.health = health\n","\n","\n","  def get_damage(self, enemy):\n","    self.health = self.health - enemy.damage\n","    if self.health == 0:\n","        return \"Игрок умер\"\n","    else:\n","      return self.health\n","\n","class Dragon:\n","  def __init__(self, name, damage, health):\n","    self.name = name\n","    self.damage = damage\n","    self.health = health\n","\n","\n","  def get_damage(self, user):\n","    self.health = self.health-user.damage\n","    if self.health == 0:\n","        return \"Дракон умер\"\n","    else:\n","      return self.health\n","\n","\n","person = Knight('Jack', 'шлем', 'меч', 10, 100)\n","dragon = Dragon('Vasya', 50, 50)\n","dragon2 = Dragon('Petya', 100, 50)\n","print(person.get_damage(dragon))\n","hp = {'rose': 100, 'black_mushroom': 40}\n"],"metadata":{"id":"Oz9BZbhAFwua","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1732266628593,"user_tz":-300,"elapsed":316,"user":{"displayName":"Елизавета Лозицкая","userId":"14110672105221511480"}},"outputId":"e2b0b1e0-1f95-4a73-e011-a9efc415fcaa"},"execution_count":5,"outputs":[{"output_type":"stream","name":"stdout","text":["50\n"]}]},{"cell_type":"markdown","source":["# Дополнительное задание\n"],"metadata":{"id":"b_mJHXcQGI9t"}},{"cell_type":"markdown","source":["Задача: Система управления библиотекой\n","\n","**Цель**\n","Создайте простую систему управления библиотекой, которая позволит пользователям добавлять книги, брать книги, возвращать книги и просматривать список доступных книг.\n","\n","**Требования**\n","\n","1. **Определение класса**:\n","   – Создайте класс с именем «Book» со следующими атрибутами:\n","     - `title`\n","     - `автор`\n","     - `isbn`\n","     - `is_borrowed` (по умолчанию `False`)\n","\n","2. **Класс библиотеки**:\n","   - Создайте класс с именем Library, который управляет коллекцией книг.\n","   - Класс должен иметь следующие методы:\n","     - `__init__(self)`: инициализирует пустой список книг.\n","     - `add_book(self, book: Book)`: добавляет новую книгу в библиотеку.\n","     - `borrow_book(self, isbn: str)`: помечает книгу как заимствованную. Если книга не найдена или уже взята, выведите соответствующее сообщение.\n","     - `return_book(self, isbn: str)`: помечает книгу как возвращенную. Если книга не найдена или не была взята взаймы, выведите соответствующее сообщение.\n","     - `list_available_books(self)`: печатает список всех доступных книг в библиотеке.\n","     - `find_book(self, isbn: str)`: возвращает объект книги, если он найден, в противном случае возвращает `None`.\n","\n","3. **Взаимодействие с пользователем**:\n","   - Создайте простое текстовое меню, которое позволит пользователям:\n","     - Добавить книгу\n","     - Одолжить книгу\n","     - Вернуть книгу\n","     - Список доступных книг\n","     - Выйти из программы"],"metadata":{"id":"pnIUdFPcGOVL"}},{"cell_type":"code","source":["class Book:\n","  def __init__(self, title, isbn, is_borrowed):\n","    self.title = title\n","    self.isbon = isbon\n","    self.is_borrowed = is_borrowed\n","\n"],"metadata":{"id":"GKKmdfN8GL6f"},"execution_count":null,"outputs":[]}]}