{"nbformat":4,"nbformat_minor":0,"metadata":{"colab":{"provenance":[{"file_id":"1f4ZFal4O7ifN3AaG6WxN89221OtIfCyY","timestamp":1732881357028},{"file_id":"1fdDdDHaE4KNBgvMIfCjJ2U7NY_5A7bzr","timestamp":1732592010219}]},"kernelspec":{"name":"python3","display_name":"Python 3"},"language_info":{"name":"python"}},"cells":[{"cell_type":"markdown","source":["**ФИО:**"],"metadata":{"id":"GEsFKJm-ABFp"}},{"cell_type":"code","execution_count":null,"metadata":{"id":"wZMLYG_G_-19"},"outputs":[],"source":["Лозицкая Елизавета Никитична"]},{"cell_type":"markdown","source":["Лозицкая Елизавета Никитична\n"],"metadata":{"id":"MmPHwFqPxz5o"}},{"cell_type":"markdown","source":["# Задание 1"],"metadata":{"id":"H4DrYnJjADuZ"}},{"cell_type":"markdown","source":["**Описание:** Создайте иерархию классов для разных типов сотрудников в компании. Реализуйте родительский класс Employee и дочерние классы Manager и Developer. Каждый класс должен иметь метод для расчета зарплаты на основе различных критериев класса.\n","\n","\n","Отрабатываемый принцип: Наследование\n","\n"],"metadata":{"id":"C17FWep-AF4a"}},{"cell_type":"code","source":["class Employee:\n","    def __init__(self, name, base_salary):\n","        self.name = name\n","        self.base_salary = base_salary\n","\n","    def calculate_salary(self):\n","        return self.base_salary\n","\n","    def __str__(self):\n","        return f\"Employee: {self.name}, Base Salary: {self.base_salary}\"\n","\n","\n","class Manager(Employee):\n","    def __init__(self, name, base_salary, bonus):\n","        super().__init__(name, base_salary)\n","        self.bonus = bonus\n","\n","    def calculate_salary(self):\n","        return self.base_salary + self.bonus\n","\n","    def __str__(self):\n","        return f\"Manager: {self.name}, Base Salary: {self.base_salary}, Bonus: {self.bonus}\"\n","\n","\n","class Developer(Employee):\n","    def __init__(self, name, base_salary, project_bonus):\n","        super().__init__(name, base_salary)\n","        self.project_bonus = project_bonus\n","\n","    def calculate_salary(self):\n","        return self.base_salary + self.project_bonus\n","\n","    def __str__(self):\n","        return f\"Developer: {self.name}, Base Salary: {self.base_salary}, Project Bonus: {self.project_bonus}\"\n","if __name__ == \"__main__\":\n","    emp1 = Employee(\"Илья\", 80000)\n","    mgr1 = Manager(\"Данил\", 50000, 60000)\n","    dev1 = Developer(\"Маша\", 40000, 3000)\n","    print(emp1)\n","    print(f\"Salary: {emp1.calculate_salary()}\")\n","    print(mgr1)\n","    print(f\"Salary: {mgr1.calculate_salary()}\")\n","    print(dev1)\n","    print(f\"Salary: {dev1.calculate_salary()}\")"],"metadata":{"id":"aexGXzqCAFH7","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1732882424400,"user_tz":-300,"elapsed":302,"user":{"displayName":"Елизавета Лозицкая","userId":"14110672105221511480"}},"outputId":"373c4b9f-8548-4109-abd0-1b9ec6688485"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["Employee: Илья, Base Salary: 80000\n","Salary: 80000\n","Manager: Данил, Base Salary: 50000, Bonus: 60000\n","Salary: 110000\n","Developer: Маша, Base Salary: 40000, Project Bonus: 3000\n","Salary: 43000\n"]}]},{"cell_type":"markdown","source":["# Задание 2"],"metadata":{"id":"ERAi0TG5BI6v"}},{"cell_type":"markdown","source":["**Описание:** Создайте иерархию классов для различных типов транспортных средств (Необходим один родительский класс и 3 дочерних). Реализуйте метод, который позволяет каждому транспортному средству возвращать собственное описание (Метод в каждом классе должен иметь одинаковое название). Продемонстрируйте вызов данного метода для каждого транспортного средства.\n","\n","\n","Отрабатываемый принцип: Полиморфизм"],"metadata":{"id":"sJ3k7ZcgBK87"}},{"cell_type":"code","source":["class Vehicle:\n","    def description(self):\n","        return\n","\n","\n","class Car(Vehicle):\n","    def __init__(self, brand, model):\n","        self.brand = brand\n","        self.model = model\n","\n","    def description(self):\n","        return f\"Автомобиль: {self.brand} {self.model}.\"\n","\n","\n","class Bike(Vehicle):\n","    def __init__(self, brand, type_of_bike):\n","        self.brand = brand\n","        self.type_of_bike = type_of_bike\n","\n","    def description(self):\n","        return f\"Велосипед: {self.brand} ({self.type_of_bike}).\"\n","\n","\n","class Truck(Vehicle):\n","    def __init__(self, brand, load_capacity):\n","        self.brand = brand\n","        self.load_capacity = load_capacity\n","\n","    def description(self):\n","        return f\"Грузовик: {self.brand}, грузоподъемность {self.load_capacity} тонн.\"\n","if __name__ == \"__main__\":\n","    vehicles = [\n","        Car(\"Toyota\", \"Camry\"),\n","        Bike(\"Giant\", \"горный\"),\n","        Truck(\"Volvo\", 10)\n","    ]\n","\n","    for vehicle in vehicles:\n","        print(vehicle.description())\n"],"metadata":{"id":"WOFOZQmDBKf4","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1732882997543,"user_tz":-300,"elapsed":267,"user":{"displayName":"Елизавета Лозицкая","userId":"14110672105221511480"}},"outputId":"189f3b8b-3622-482a-dfd9-398bf3df8b83"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["Автомобиль: Toyota Camry.\n","Велосипед: Giant (горный).\n","Грузовик: Volvo, грузоподъемность 10 тонн.\n"]}]},{"cell_type":"markdown","source":["# Задание 3"],"metadata":{"id":"7E_SJXMJBvD4"}},{"cell_type":"markdown","source":["Онлайн-магазин:\n","- Создайте модель для онлайн-магазина с классами Product, Order, Customer, и ShoppingCart.\n","- Product включает информацию о цене, наличии на складе и категории товара.\n","Order обрабатывает процесс покупки, включая расчет цены с учетом скидок и налогов.\n","- Customer управляет информацией о пользователе и его истории заказов.\n","- ShoppingCart позволяет добавлять, удалять и обновлять количество товаров перед оформлением заказа.\n"],"metadata":{"id":"dd1mwKj_BxHa"}},{"cell_type":"code","source":[],"metadata":{"id":"wkCcv_K-Bwdv"},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":["# Задание 4"],"metadata":{"id":"ih7iPlYfB7lL"}},{"cell_type":"markdown","source":["Симулятор космического корабля:\n","- Создайте симулятор управления космическим кораблем с классами SpaceShip, CrewMember, и Mission.\n","- SpaceShip имеет атрибуты для управления топливом, состоянием корпуса, и текущей скоростью.\n","- CrewMember контролирует здоровье, навыки, и роли в команде (например, пилот, инженер).\n","- Mission определяет цели, ресурсы, и возможные события (например, аварии, встречи с астероидами)."],"metadata":{"id":"zLwqVCbpCBvc"}},{"cell_type":"code","source":[],"metadata":{"id":"4NyrOOy8B9ED"},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":["# Дополнительно:"],"metadata":{"id":"F7mRVsZjCXk0"}},{"cell_type":"markdown","source":["**Описание:** создайте консольную версию игры крестики-нолики, используя классы"],"metadata":{"id":"X4Lkf86UCc1h"}},{"cell_type":"code","source":[],"metadata":{"id":"x9OxpNsyCcUo"},"execution_count":null,"outputs":[]}]}