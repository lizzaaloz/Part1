{"nbformat":4,"nbformat_minor":0,"metadata":{"colab":{"provenance":[{"file_id":"1-1pREx-cvWdJRwcPZCX2BdqRqwJdniU4","timestamp":1731041331113},{"file_id":"17IcY1UTGzZMUteC1w_OLi1DXlUbhQRJu","timestamp":1730777834927}]},"kernelspec":{"name":"python3","display_name":"Python 3"},"language_info":{"name":"python"}},"cells":[{"cell_type":"markdown","source":["**Введите ваше ФИО**"],"metadata":{"id":"oP68Ko6DZnFT"}},{"cell_type":"code","source":["Лозицкая Елизавета Никитична"],"metadata":{"id":"_rtkk1A9Zmc5"},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":["# Задание 1"],"metadata":{"id":"ra45s33wUt-C"}},{"cell_type":"markdown","source":["Задача: Создать чат бота для получения информации об исследованиях космоса\n","\n","Описание: Создайте комплексное приложение командной строки, которое будет использоваться в качестве панели управления исследованиями космоса. Данное приложение будет обращаться к https://api.nasa.gov/ для предоставления пользователям набора информации о космосе, включая:\n","\n","- Астрономическая картинка дня (APOD): Отображение APOD с пояснениями к нему.\n","- Фотографии с марсохода: позволяет пользователям выбирать и фильтровать фотографии с марсохода по дате и типу камеры.\n","- Объекты, сближающиеся с Землей (ОСЗ): Поиск и отображение информации об объектах, сближающихся с Землей, на определенную дату, включая их размеры и потенциальную опасность.\n","- Данные о космической погоде: Отображают последние данные о космической погоде, включая солнечные вспышки и геомагнитные бури.\n","Приложение должно позволять пользователям ориентироваться в этих функциях, корректно обрабатывать ошибки и обеспечивать удобство работы.\n","\n","Требования:\n","- Пользовательский ввод: Приложение должно предложить пользователю ввести данные, чтобы выбрать, какую функцию он хочет изучить.\n","- Проверка данных: Убедитесь, что пользовательские данные (например, даты) проверены.\n","- Обработка ошибок: Корректно обрабатывайте ошибки API и неверные ответы.\n","- Представление данных: Представляйте данные в четкой и организованной форме.\n","- Опция выхода: позволяет пользователям выходить из приложения в любое время."],"metadata":{"id":"G56D5mNCUwp5"}},{"cell_type":"code","execution_count":18,"metadata":{"id":"wGeJM9n4UqUD","executionInfo":{"status":"ok","timestamp":1731079501768,"user_tz":-300,"elapsed":394,"user":{"displayName":"Елизавета Лозицкая","userId":"14110672105221511480"}}},"outputs":[],"source":["import requests\n","import json\n","import datetime\n","def get_apod():\n","    \"Получает и отображает астрономическую картинку дня\"\n","    url = \"https://api.nasa.gov/planetary/apod\"\n","    params = {\"api_key\": \" \"}\n","    response = requests.get(url, params=params)\n","    if response.status_code == 200:\n","        data = response.json()\n","        print(f\"**Астрономическая картинка дня: {data['title']}**\\n\")\n","        print(data['explanation'])\n","        print(f\"\\n[Ссылка на изображение]: {data['url']}\")\n","    else:\n","        print(f\"Ошибка получения изображения: {response.status_code}\")\n","def get_mars_photos(date=None, camera=None):\n","    \"Получает и отображает фотографии с марсохода\"\n","    url = \"https://api.nasa.gov/mars-photos/api/v1/rovers/curiosity/photos\"\n","    params = {\"api_key\": \" \"}\n","    if date:\n","        params[\"earth_date\"] = date\n","    if camera:\n","        params[\"camera\"] = camera\n","        response = requests.get(url, params=params)\n","    if response.status_code == 200:\n","        data = response.json()\n","        if data['photos']:\n","            print(\"Фотографии с марсохода:\")\n","            for photo in data['photos']:\n","                print(f\"\\n- {photo['img_src']}\")\n","            else:\n","                print(\"Фотографий для заданных параметров не найдено\")\n","        else:\n","            print(f\"Ошибка получения фотографий: {response.status_code}\")\n","def get_neo(date):\n","    \"Получает информацию об объектах, сближающихся с Землей\"\n","    url = \"https://api.nasa.gov/neo/rest/v1/feed\"\n","    params = {\"api_key\": \" \", \"start_date\": date, \"end_date\": date}\n","    response = requests.get\n"]},{"cell_type":"markdown","source":["# Задание 2"],"metadata":{"id":"ia9UtA0cU1Iy"}},{"cell_type":"markdown","source":["Описание задачи\n","\n","Цель этой задачи - создать скрипт на Python, который взаимодействует с API Чикагского института искусств (https://api.artic.edu/docs/) для извлечения и отображения произведений искусства. Скрипт должен позволять пользователям просматривать работы по страницам, фильтровать их по имени художника и просматривать подробную информацию о выбранных произведениях искусства. Ниже приведены требования и функциональные возможности, которые необходимо реализовать:\n","\n","Требования:\n","Извлекать произведения искусства:\n","\n","- Создайте функцию, которая извлекает список произведений искусства из API Чикагского института искусств.\n","Функция должна принимать параметр page для разбивки на страницы и возвращать список произведений искусства вместе с информацией о разбивке на страницы.\n","Фильтровать произведения искусства:\n","\n","- Реализуйте функцию, которая фильтрует список произведений искусства на основе имени указанного художника. Функция должна возвращать список работ, которые соответствуют имени художника (без учета регистра).\n","Отображать подробную информацию об оформлении:\n","\n","- Напишите функцию, которая отображает названия работ для пользователя и позволяет ему выбрать одну из них, введя соответствующий номер.\n","После выбора функция должна отображать подробную информацию о выбранном произведении, включая название, исполнителя, дату и носитель.\n","Разбивка на страницы и взаимодействие с пользователем:\n","\n","- Создайте основную функцию, которая управляет выборкой произведений и взаимодействием с пользователем.\n","\n","Разрешите пользователям перемещаться по страницам с произведениями искусства, выполнять фильтрацию по исполнителю или выходить из программы.\n","\n","Если страниц с произведениями искусства несколько, укажите варианты перехода к следующей странице, предыдущей странице, фильтрации по исполнителю или выхода из программы."],"metadata":{"id":"Ofu_GmqrU1Iy"}},{"cell_type":"code","execution_count":null,"metadata":{"id":"jjUH1GznU1Iy"},"outputs":[],"source":["\n"]},{"cell_type":"markdown","source":["# Задание 3"],"metadata":{"id":"eecUb-akU1ji"}},{"cell_type":"markdown","source":["Задача: Создать программу по управлению портфелем криптовалют\n","\n","Цель: Создать скрипт на Python, который извлекает цены на криптовалюты в режиме реального времени, позволяет пользователям управлять портфелем криптовалют, вычисляет общую стоимость портфеля, отслеживает изменения цен и предоставляет исторические данные о ценах для анализа.\n","\n","Требования:\n","Получение текущих цен на криптовалюты:\n","\n","Используйте https://docs.coingecko.com/ для получения актуальных цен на список криптовалют.\n","\n","Управление портфелем:\n","\n","- Позволяет пользователю создавать портфель криптовалют и управлять им, указывая количество каждой криптовалюты, которой он владеет.\n","- Расчитывает общую стоимость портфеля в указанной фиатной валюте (например, долларах США).\n","\n","Отслеживание изменения цен:\n","\n","- Отображение процентного изменения цены для каждой криптовалюты в портфеле за последние 24 часа.\n","- Выделите все криптовалюты, стоимость которых значительно увеличилась или снизилась.\n","\n","Поиск исторических данных о ценах:\n","\n","- Получение исторических данных о ценах на указанную криптовалюту за последнюю неделю.\n","- Предоставьте пользователю возможность визуализировать эти данные в простом текстовом формате (например, цены за день).\n","\n","Взаимодействие с пользователем:\n","\n","- Реализуйте интерфейс командной строки для ввода данных пользователем.\n","- Предоставьте опции для получения текущих цен, управления портфелем, просмотра изменений цен или анализа исторических данных.\n"],"metadata":{"id":"jsK7IKptU1ji"}},{"cell_type":"code","source":["\n"],"metadata":{"id":"_0DToTqlvywa","executionInfo":{"status":"ok","timestamp":1731062035236,"user_tz":-300,"elapsed":1577,"user":{"displayName":"Елизавета Лозицкая","userId":"14110672105221511480"}}},"execution_count":1,"outputs":[]}]}